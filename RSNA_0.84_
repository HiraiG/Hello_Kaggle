{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f5417d2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.007567,
     "end_time": "2024-06-16T04:48:38.051303",
     "exception": false,
     "start_time": "2024-06-16T04:48:38.043736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Inference\n",
    "\n",
    "Training code: [rsna-3channel](https://www.kaggle.com/code/samu2505/rsna-3channeldataset?scriptVersionId=182471948)\n",
    "\n",
    "Loading Model weights and Cross-validation: [wandb&cross-validation](https://www.kaggle.com/code/samu2505/rsna-wandbmodelweights-crossvalidation/notebook)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce10f356",
   "metadata": {
    "papermill": {
     "duration": 0.006416,
     "end_time": "2024-06-16T04:48:38.064530",
     "exception": false,
     "start_time": "2024-06-16T04:48:38.058114",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc5d7f83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:38.079714Z",
     "iopub.status.busy": "2024-06-16T04:48:38.079341Z",
     "iopub.status.idle": "2024-06-16T04:48:48.934944Z",
     "shell.execute_reply": "2024-06-16T04:48:48.934157Z"
    },
    "papermill": {
     "duration": 10.865935,
     "end_time": "2024-06-16T04:48:48.937277",
     "exception": false,
     "start_time": "2024-06-16T04:48:38.071342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os, gc, sys, copy, pickle\n",
    "from pathlib import Path\n",
    "import glob\n",
    "from tqdm.auto import tqdm\n",
    "tqdm.pandas()\n",
    "\n",
    "import math\n",
    "import random\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from joblib import Parallel, delayed\n",
    "import multiprocessing as mp\n",
    "\n",
    "import albumentations as A\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.cuda.amp as amp\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "import pytorch_lightning as pl\n",
    "from pytorch_lightning.loggers import WandbLogger\n",
    "from pytorch_lightning.callbacks import LearningRateMonitor, ModelCheckpoint\n",
    "from pytorch_lightning.callbacks.early_stopping import EarlyStopping\n",
    "\n",
    "from torch.utils.data import WeightedRandomSampler\n",
    "from sklearn.utils.class_weight import compute_class_weight\n",
    "\n",
    "import timm\n",
    "\n",
    "import cv2\n",
    "cv2.setNumThreads(0)\n",
    "import PIL\n",
    "import pydicom\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e56891db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:48.952064Z",
     "iopub.status.busy": "2024-06-16T04:48:48.951789Z",
     "iopub.status.idle": "2024-06-16T04:48:48.958231Z",
     "shell.execute_reply": "2024-06-16T04:48:48.957333Z"
    },
    "papermill": {
     "duration": 0.015873,
     "end_time": "2024-06-16T04:48:48.960132",
     "exception": false,
     "start_time": "2024-06-16T04:48:48.944259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def seeding(SEED):\n",
    "    np.random.seed(SEED)\n",
    "    random.seed(SEED)\n",
    "    os.environ['PYTHONHASHSEED'] = str(SEED)\n",
    "    torch.manual_seed(SEED)\n",
    "    if torch.cuda.is_available(): \n",
    "        torch.cuda.manual_seed(SEED)\n",
    "        torch.cuda.manual_seed_all(SEED)\n",
    "        torch.backends.cudnn.deterministic = True\n",
    "        torch.backends.cudnn.benchmark = False\n",
    "#     os.environ['TF_CUDNN_DETERMINISTIC'] = str(SEED)\n",
    "#     tf.random.set_seed(SEED)\n",
    "#     keras.utils.set_random_seed(seed=SEED)\n",
    "    print('seeding done!!!')\n",
    "\n",
    "def flush():\n",
    "    gc.collect()\n",
    "    if torch.cuda.is_available():\n",
    "        torch.cuda.empty_cache()\n",
    "        torch.cuda.reset_peak_memory_stats()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fddc85f",
   "metadata": {
    "papermill": {
     "duration": 0.006571,
     "end_time": "2024-06-16T04:48:48.973250",
     "exception": false,
     "start_time": "2024-06-16T04:48:48.966679",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fe9e5e1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:48.987316Z",
     "iopub.status.busy": "2024-06-16T04:48:48.987056Z",
     "iopub.status.idle": "2024-06-16T04:48:49.015462Z",
     "shell.execute_reply": "2024-06-16T04:48:49.014502Z"
    },
    "papermill": {
     "duration": 0.037626,
     "end_time": "2024-06-16T04:48:49.017361",
     "exception": false,
     "start_time": "2024-06-16T04:48:48.979735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "seeding done!!!\n"
     ]
    }
   ],
   "source": [
    "CONFIG = dict(\n",
    "    project_name = \"PL-RSNA-2024-Lumbar-Spine-Classification\",\n",
    "    artifact_name = \"rsnaEffNetModel\",\n",
    "    load_kernel = None,\n",
    "    load_last = True,\n",
    "    n_folds = 5,\n",
    "    backbone = \"efficientnet_b0.ra_in1k\", # tf_efficientnetv2_s_in21ft1k\n",
    "    img_size = 384,\n",
    "    n_slice_per_c = 16,\n",
    "    in_chans = 1,\n",
    "\n",
    "    drop_rate = 0.,\n",
    "    drop_rate_last = 0.3,\n",
    "    drop_path_rate = 0.,\n",
    "    p_mixup = 0.5,\n",
    "    p_rand_order_v1 = 0.2,\n",
    "    lr = 1e-3,\n",
    "\n",
    "    out_dim = 3,\n",
    "    epochs = 15,\n",
    "    batch_size = 8,\n",
    "    device = torch.device(\"cuda\") if torch.cuda.is_available() else \"cpu\",\n",
    "    seed = 2024\n",
    ")\n",
    "\n",
    "seeding(CONFIG['seed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26fb0627",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.031782Z",
     "iopub.status.busy": "2024-06-16T04:48:49.031541Z",
     "iopub.status.idle": "2024-06-16T04:48:49.038429Z",
     "shell.execute_reply": "2024-06-16T04:48:49.037589Z"
    },
    "papermill": {
     "duration": 0.016244,
     "end_time": "2024-06-16T04:48:49.040354",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.024110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['sample_submission.csv',\n",
       " 'train_images',\n",
       " 'train_series_descriptions.csv',\n",
       " 'train.csv',\n",
       " 'train_label_coordinates.csv',\n",
       " 'test_series_descriptions.csv',\n",
       " 'test_images']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DATA_PATH = Path(\"/kaggle/input/rsna-2024-lumbar-spine-degenerative-classification\")\n",
    "os.listdir(DATA_PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2d4ce8d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.055011Z",
     "iopub.status.busy": "2024-06-16T04:48:49.054726Z",
     "iopub.status.idle": "2024-06-16T04:48:49.100713Z",
     "shell.execute_reply": "2024-06-16T04:48:49.100015Z"
    },
    "papermill": {
     "duration": 0.055462,
     "end_time": "2024-06-16T04:48:49.102558",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.047096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sample_df = pd.read_csv(DATA_PATH/\"sample_submission.csv\")\n",
    "test_desc = pd.read_csv(DATA_PATH/\"test_series_descriptions.csv\")\n",
    "train_desc = pd.read_csv(DATA_PATH/\"train_series_descriptions.csv\")\n",
    "train_main = pd.read_csv(DATA_PATH/\"train.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8e8b0d8",
   "metadata": {
    "papermill": {
     "duration": 0.006752,
     "end_time": "2024-06-16T04:48:49.116194",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.109442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create test dataset\n",
    "\n",
    "Adopted from [shubhamcodez](https://www.kaggle.com/code/shubhamcodez/rsna-resnet-starter-notebook)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5e8bca5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.131987Z",
     "iopub.status.busy": "2024-06-16T04:48:49.131675Z",
     "iopub.status.idle": "2024-06-16T04:48:49.189977Z",
     "shell.execute_reply": "2024-06-16T04:48:49.189084Z"
    },
    "papermill": {
     "duration": 0.068013,
     "end_time": "2024-06-16T04:48:49.192045",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.124032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>study_id</th>\n",
       "      <th>series_id</th>\n",
       "      <th>series_description</th>\n",
       "      <th>image_path</th>\n",
       "      <th>condition</th>\n",
       "      <th>row_id</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44036939</td>\n",
       "      <td>2828203845</td>\n",
       "      <td>Sagittal T1</td>\n",
       "      <td>/kaggle/input/rsna-2024-lumbar-spine-degenerat...</td>\n",
       "      <td>left_neural_foraminal_narrowing</td>\n",
       "      <td>44036939_left_neural_foraminal_narrowing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44036939</td>\n",
       "      <td>2828203845</td>\n",
       "      <td>Sagittal T1</td>\n",
       "      <td>/kaggle/input/rsna-2024-lumbar-spine-degenerat...</td>\n",
       "      <td>left_neural_foraminal_narrowing</td>\n",
       "      <td>44036939_left_neural_foraminal_narrowing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>44036939</td>\n",
       "      <td>2828203845</td>\n",
       "      <td>Sagittal T1</td>\n",
       "      <td>/kaggle/input/rsna-2024-lumbar-spine-degenerat...</td>\n",
       "      <td>left_neural_foraminal_narrowing</td>\n",
       "      <td>44036939_left_neural_foraminal_narrowing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>44036939</td>\n",
       "      <td>2828203845</td>\n",
       "      <td>Sagittal T1</td>\n",
       "      <td>/kaggle/input/rsna-2024-lumbar-spine-degenerat...</td>\n",
       "      <td>left_neural_foraminal_narrowing</td>\n",
       "      <td>44036939_left_neural_foraminal_narrowing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44036939</td>\n",
       "      <td>2828203845</td>\n",
       "      <td>Sagittal T1</td>\n",
       "      <td>/kaggle/input/rsna-2024-lumbar-spine-degenerat...</td>\n",
       "      <td>left_neural_foraminal_narrowing</td>\n",
       "      <td>44036939_left_neural_foraminal_narrowing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   study_id   series_id series_description  \\\n",
       "0  44036939  2828203845        Sagittal T1   \n",
       "1  44036939  2828203845        Sagittal T1   \n",
       "2  44036939  2828203845        Sagittal T1   \n",
       "3  44036939  2828203845        Sagittal T1   \n",
       "4  44036939  2828203845        Sagittal T1   \n",
       "\n",
       "                                          image_path  \\\n",
       "0  /kaggle/input/rsna-2024-lumbar-spine-degenerat...   \n",
       "1  /kaggle/input/rsna-2024-lumbar-spine-degenerat...   \n",
       "2  /kaggle/input/rsna-2024-lumbar-spine-degenerat...   \n",
       "3  /kaggle/input/rsna-2024-lumbar-spine-degenerat...   \n",
       "4  /kaggle/input/rsna-2024-lumbar-spine-degenerat...   \n",
       "\n",
       "                         condition                                    row_id  \\\n",
       "0  left_neural_foraminal_narrowing  44036939_left_neural_foraminal_narrowing   \n",
       "1  left_neural_foraminal_narrowing  44036939_left_neural_foraminal_narrowing   \n",
       "2  left_neural_foraminal_narrowing  44036939_left_neural_foraminal_narrowing   \n",
       "3  left_neural_foraminal_narrowing  44036939_left_neural_foraminal_narrowing   \n",
       "4  left_neural_foraminal_narrowing  44036939_left_neural_foraminal_narrowing   \n",
       "\n",
       "   target  \n",
       "0       0  \n",
       "1       0  \n",
       "2       0  \n",
       "3       0  \n",
       "4       0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define the base path for test images\n",
    "base_path = f\"{str(DATA_PATH)}/test_images\"\n",
    "\n",
    "# function to get image paths for a series\n",
    "def get_image_paths(row):\n",
    "    series_path = os.path.join(base_path, str(row['study_id']), str(row['series_id']))\n",
    "    if os.path.exists(series_path):\n",
    "        return [\n",
    "            os.path.join(series_path, f) for f in os.listdir(series_path) if os.path.isfile(os.path.join(series_path, f))\n",
    "        ]\n",
    "    return []\n",
    "\n",
    "# Mapping of series_description to conditions\n",
    "condition_mapping = {\n",
    "    'Sagittal T1': {'left': 'left_neural_foraminal_narrowing', 'right': 'right_neural_foraminal_narrowing'},\n",
    "    'Axial T2': {'left': 'left_subarticular_stenosis', 'right': 'right_subarticular_stenosis'},\n",
    "    'Sagittal T2/STIR': 'spinal_canal_stenosis'\n",
    "}\n",
    "\n",
    "# Create a list to store the expanded rows\n",
    "expanded_rows = []\n",
    "\n",
    "# Expand the dataframe by adding new rows for each file path\n",
    "for index, row in test_desc.iterrows():\n",
    "    image_paths = get_image_paths(row)\n",
    "    conditions = condition_mapping.get(row['series_description'], {})\n",
    "    if isinstance(conditions, str):  # Single condition\n",
    "        conditions = {'left': conditions, 'right': conditions}\n",
    "    for side, condition in conditions.items():\n",
    "        for image_path in image_paths:\n",
    "            expanded_rows.append({\n",
    "                'study_id': row['study_id'],\n",
    "                'series_id': row['series_id'],\n",
    "                'series_description': row['series_description'],\n",
    "                'image_path': image_path,\n",
    "                'condition': condition,\n",
    "                'row_id': f\"{row['study_id']}_{condition}\"\n",
    "            })\n",
    "\n",
    "# Create a new dataframe from the expanded rows\n",
    "expanded_test_desc = pd.DataFrame(expanded_rows)\n",
    "\n",
    "test_data = expanded_test_desc.copy()\n",
    "test_data['target'] = 0\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e1c76e55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.207532Z",
     "iopub.status.busy": "2024-06-16T04:48:49.207212Z",
     "iopub.status.idle": "2024-06-16T04:48:49.211670Z",
     "shell.execute_reply": "2024-06-16T04:48:49.210824Z"
    },
    "papermill": {
     "duration": 0.014148,
     "end_time": "2024-06-16T04:48:49.213551",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.199403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "label2id = {\"Normal/Mild\": 0, \"Moderate\": 1, \"Severe\": 2}\n",
    "id2label = {v:k for k,v in label2id.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4a0974c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.228758Z",
     "iopub.status.busy": "2024-06-16T04:48:49.228485Z",
     "iopub.status.idle": "2024-06-16T04:48:49.233262Z",
     "shell.execute_reply": "2024-06-16T04:48:49.232451Z"
    },
    "papermill": {
     "duration": 0.014423,
     "end_time": "2024-06-16T04:48:49.235097",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.220674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_dicom(path):\n",
    "    dicom = pydicom.read_file(path)\n",
    "    data = dicom.pixel_array\n",
    "    data = data - np.min(data)\n",
    "    if np.max(data) != 0:\n",
    "        data = data / np.max(data)\n",
    "    data = (data * 255).astype(np.uint8)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5bea8115",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.250343Z",
     "iopub.status.busy": "2024-06-16T04:48:49.250097Z",
     "iopub.status.idle": "2024-06-16T04:48:49.258062Z",
     "shell.execute_reply": "2024-06-16T04:48:49.257275Z"
    },
    "papermill": {
     "duration": 0.017745,
     "end_time": "2024-06-16T04:48:49.259947",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.242202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class CustomDataset(Dataset):\n",
    "#     def __init__(self, dataframe, transform=None, label_name='target'):\n",
    "#         self.dataframe = dataframe\n",
    "#         self.transform = transform\n",
    "#         self.label = dataframe.loc[:, label_name]\n",
    "\n",
    "#     def __len__(self):\n",
    "#         return len(self.dataframe)\n",
    "\n",
    "#     def __getitem__(self, index):\n",
    "#         image_path = self.dataframe['image_path'][index]\n",
    "#         image = load_dicom(image_path)  # Define this function to load your DICOM images\n",
    "#         target = self.dataframe['target'][index]\n",
    "        \n",
    "#         if self.transform:\n",
    "#             image = self.transform(image)\n",
    "\n",
    "#         return image, torch.tensor(target).float()\n",
    "    \n",
    "#     def get_labels(self):\n",
    "#         return self.label\n",
    "\n",
    "class CustomDataset(Dataset):\n",
    "    def __init__(self, dataframe, transform=None, label_name='target'):\n",
    "        self.dataframe = dataframe\n",
    "        self.transform = transform\n",
    "        self.label = dataframe.loc[:, label_name]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.dataframe)\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        image_path = self.dataframe['image_path'][index]\n",
    "        image = load_dicom(image_path)  # Define this function to load your DICOM images\n",
    "        target = self.dataframe['target'][index]\n",
    "        \n",
    "        if self.transform:\n",
    "            image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)\n",
    "            image = self.transform(image=image)['image']\n",
    "            image = image.transpose(2, 0, 1).astype(np.float32) / 255.\n",
    "\n",
    "        return image, torch.tensor(target).float()\n",
    "    \n",
    "    def get_labels(self):\n",
    "        return self.label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b0051e83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.275164Z",
     "iopub.status.busy": "2024-06-16T04:48:49.274887Z",
     "iopub.status.idle": "2024-06-16T04:48:49.286178Z",
     "shell.execute_reply": "2024-06-16T04:48:49.285330Z"
    },
    "papermill": {
     "duration": 0.021021,
     "end_time": "2024-06-16T04:48:49.287994",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.266973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def get_transforms(height, width):\n",
    "#     train_tsfm = transforms.Compose([\n",
    "#         transforms.Lambda(lambda x: (x * 255).astype(np.uint8)),  # Convert back to uint8 for PIL\n",
    "#         transforms.ToPILImage(),\n",
    "#         transforms.Resize((height, width)),\n",
    "#         transforms.Grayscale(num_output_channels=3),\n",
    "#         transforms.RandomHorizontalFlip(p=0.5),\n",
    "#         transforms.RandomRotation(degrees=(0, 30)),\n",
    "#         transforms.ToTensor(),\n",
    "#     ])\n",
    "    \n",
    "#     valid_tsfm = transforms.Compose([\n",
    "#         transforms.Lambda(lambda x: (x * 255).astype(np.uint8)),  # Convert back to uint8 for PIL\n",
    "#         transforms.ToPILImage(),\n",
    "#         transforms.Resize((height, width)),\n",
    "#         transforms.Grayscale(num_output_channels=3),\n",
    "#         transforms.ToTensor(),\n",
    "#     ])\n",
    "    \n",
    "#     return {\"train\": train_tsfm, \"eval\": valid_tsfm}\n",
    "\n",
    "\n",
    "def get_transforms(height, width):\n",
    "    train_tsfm = A.Compose([\n",
    "        # Geometric augmentations\n",
    "#         A.Perspective(p=0.5),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.VerticalFlip(p=0.5),\n",
    "#         A.RandomRotate90(p=0.5),\n",
    "        A.Rotate(-30, 30, p=0.5),\n",
    "        \n",
    "        A.Resize(height=height, width=width),\n",
    "    ])\n",
    "    \n",
    "    valid_tsfm = A.Compose([\n",
    "        A.Resize(height=height, width=width),\n",
    "    ])\n",
    "    return {\"train\": train_tsfm, \"eval\": valid_tsfm}\n",
    "\n",
    "\n",
    "def get_dataloaders(data, cfg, split=\"train\"):\n",
    "    img_size = cfg['img_size']\n",
    "    height, width = img_size, img_size\n",
    "    tsfm = get_transforms(height=height, width=width)\n",
    "    if split == 'train':\n",
    "        tr_tsfm = tsfm['train']\n",
    "        ds = CustomDataset(data, transform=tr_tsfm)\n",
    "        labels = ds.get_labels()\n",
    "#         class_weights = torch.tensor(compute_class_weight(class_weight=\"balanced\", classes=np.unique(labels), y=labels))\n",
    "        class_weights = torch.tensor([1, 2, 4])\n",
    "        samples_weights = class_weights[labels]\n",
    "#         print(class_weights)\n",
    "        sampler = WeightedRandomSampler(weights=samples_weights, \n",
    "                                        num_samples=len(samples_weights), \n",
    "                                        replacement=True)\n",
    "\n",
    "        dls = DataLoader(ds, \n",
    "                         batch_size=cfg['batch_size'], \n",
    "                         sampler=sampler, \n",
    "                         num_workers=os.cpu_count(), \n",
    "                         drop_last=True, \n",
    "                         pin_memory=True)\n",
    "        \n",
    "    elif split == 'valid' or split == 'test':\n",
    "        eval_tsfm = tsfm['eval']\n",
    "        ds = CustomDataset(data, transform=eval_tsfm)\n",
    "        dls = DataLoader(ds, \n",
    "                         batch_size=2*cfg['batch_size'], \n",
    "                         shuffle=False, \n",
    "                         num_workers=os.cpu_count(), \n",
    "                         drop_last=False, \n",
    "                         pin_memory=True)\n",
    "    else:\n",
    "        raise Exception(\"Split should be 'train' or 'valid' or 'test'!!!\")\n",
    "    return dls"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83e67386",
   "metadata": {
    "papermill": {
     "duration": 0.006829,
     "end_time": "2024-06-16T04:48:49.301807",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.294978",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b2652c66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.316804Z",
     "iopub.status.busy": "2024-06-16T04:48:49.316541Z",
     "iopub.status.idle": "2024-06-16T04:48:49.325353Z",
     "shell.execute_reply": "2024-06-16T04:48:49.324523Z"
    },
    "papermill": {
     "duration": 0.018242,
     "end_time": "2024-06-16T04:48:49.327122",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.308880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TimmModel(nn.Module):\n",
    "    def __init__(self, backbone, pretrained=False):\n",
    "        super(TimmModel, self).__init__()\n",
    "\n",
    "        self.encoder = timm.create_model(\n",
    "            backbone,\n",
    "            num_classes=CONFIG[\"out_dim\"],\n",
    "            features_only=False,\n",
    "            drop_rate=CONFIG[\"drop_rate\"],\n",
    "            drop_path_rate=CONFIG[\"drop_path_rate\"],\n",
    "            pretrained=pretrained\n",
    "        )\n",
    "\n",
    "        if 'efficient' in backbone:\n",
    "            hdim = self.encoder.conv_head.out_channels\n",
    "            self.encoder.classifier = nn.Identity()\n",
    "        elif 'convnext' in backbone:\n",
    "            hdim = self.encoder.head.fc.in_features\n",
    "            self.encoder.head.fc = nn.Identity()\n",
    "\n",
    "\n",
    "        self.lstm = nn.LSTM(hdim, 256, num_layers=2, dropout=CONFIG[\"drop_rate\"], bidirectional=True, batch_first=True)\n",
    "        self.head = nn.Sequential(\n",
    "            nn.Linear(512, 256),\n",
    "            nn.BatchNorm1d(256),\n",
    "            nn.Dropout(CONFIG[\"drop_rate_last\"]),\n",
    "            nn.LeakyReLU(0.1),\n",
    "            nn.Linear(256, CONFIG[\"out_dim\"]),\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        feat = self.encoder(x)\n",
    "        feat, _ = self.lstm(feat)\n",
    "        feat = self.head(feat)\n",
    "        return feat"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d4ec1c1",
   "metadata": {
    "papermill": {
     "duration": 0.00675,
     "end_time": "2024-06-16T04:48:49.341028",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.334278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Predictions\n",
    "\n",
    "Here we have code for prediction with and without test time augmentation\n",
    "\n",
    "Test time augmentation (TTA) is useful for test images that the model is pretty unsure. It takes approximately 2 hours as compared to the normal prediction which takes roughly 30 minutes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ed5ad32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.356041Z",
     "iopub.status.busy": "2024-06-16T04:48:49.355776Z",
     "iopub.status.idle": "2024-06-16T04:48:49.366191Z",
     "shell.execute_reply": "2024-06-16T04:48:49.365421Z"
    },
    "papermill": {
     "duration": 0.020092,
     "end_time": "2024-06-16T04:48:49.368080",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.347988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "FLIPS = [None, [-1], [-2], [-2, -1]]\n",
    "\n",
    "def inference_loop(model, loader):\n",
    "    model.to(CONFIG[\"device\"])\n",
    "    model.eval()\n",
    "    preds = np.empty((0, 3))\n",
    "    with torch.no_grad():\n",
    "        for batch in tqdm(loader):\n",
    "            images, labels = batch\n",
    "            images = images.to(CONFIG[\"device\"], non_blocking=True)\n",
    "            with torch.autocast(device_type=\"cuda\", dtype=torch.float16):\n",
    "#                 logits = model(images.to(torch.float32))\n",
    "                logits = model(images)\n",
    "#                 logits = logits.mean(axis=1).softmax(dim=-1)\n",
    "                logits = logits.softmax(dim=-1)\n",
    "                preds = np.concatenate([preds, logits.detach().cpu().numpy()])\n",
    "    np.save('preds.npy', preds)\n",
    "    \n",
    "    \n",
    "def tta_inference_loop(model, loader):\n",
    "    model.to(CONFIG[\"device\"])\n",
    "    model.eval()\n",
    "    preds = np.empty((0, 3))\n",
    "    with torch.no_grad():\n",
    "        for batch in tqdm(loader):\n",
    "            images, labels = batch\n",
    "            images = images.to(CONFIG[\"device\"], non_blocking=True)\n",
    "            pred_tta = []\n",
    "            with torch.autocast(device_type=\"cuda\", dtype=torch.float16):\n",
    "                for f in FLIPS:\n",
    "                    logits = model(torch.flip(images, f) if f is not None else images)\n",
    "                    logits = logits.softmax(dim=-1)\n",
    "                    pred_tta.append(logits.detach().cpu().numpy())\n",
    "#                 preds = np.concatenate([preds, logits.detach().cpu().numpy()])\n",
    "                preds = np.concatenate([preds, np.mean(pred_tta, 0)])\n",
    "    np.save('preds.npy', preds)\n",
    "#     return preds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6af3d09",
   "metadata": {
    "papermill": {
     "duration": 0.006912,
     "end_time": "2024-06-16T04:48:49.382044",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.375132",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load model weights\n",
    "\n",
    "The model is trained for 1 fold using pytorch lightning [rsna-pytorchlightning](https://www.kaggle.com/code/samu2505/rsna-pytorchlightning-train?scriptVersionId=182471948) and the model weights are stored using Weights and Biases artifacts and you can find them here [rsna-wandbmodelweights-crossvalidation](https://www.kaggle.com/code/samu2505/rsna-wandbmodelweights-crossvalidation/notebook)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "79e1b0d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:49.397294Z",
     "iopub.status.busy": "2024-06-16T04:48:49.396794Z",
     "iopub.status.idle": "2024-06-16T04:48:50.004471Z",
     "shell.execute_reply": "2024-06-16T04:48:50.003516Z"
    },
    "papermill": {
     "duration": 0.617808,
     "end_time": "2024-06-16T04:48:50.006869",
     "exception": false,
     "start_time": "2024-06-16T04:48:49.389061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights_path = \"/kaggle/input/rsna-wandbmodelweights-crossvalidation/model_weights.pth\"\n",
    "weights = torch.load(weights_path, map_location=torch.device(\"cpu\"))\n",
    "model = TimmModel(backbone=CONFIG[\"backbone\"], pretrained=False)\n",
    "model.load_state_dict(weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b3bd7f0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:50.023300Z",
     "iopub.status.busy": "2024-06-16T04:48:50.022991Z",
     "iopub.status.idle": "2024-06-16T04:48:54.835202Z",
     "shell.execute_reply": "2024-06-16T04:48:54.834138Z"
    },
    "papermill": {
     "duration": 4.823297,
     "end_time": "2024-06-16T04:48:54.837876",
     "exception": false,
     "start_time": "2024-06-16T04:48:50.014579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "be41fc0f7b0b412cb4651aa56222d97d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/13 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dls = get_dataloaders(test_data, CONFIG, split=\"test\")\n",
    "# inference_loop(model, dls)\n",
    "tta_inference_loop(model, dls)\n",
    "# _ = Parallel(n_jobs=mp.cpu_count())(\n",
    "#     delayed(inference_loop(model, dls))\n",
    "# )\n",
    "\n",
    "preds = np.load('preds.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bebe2b2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:54.861012Z",
     "iopub.status.busy": "2024-06-16T04:48:54.860663Z",
     "iopub.status.idle": "2024-06-16T04:48:54.874965Z",
     "shell.execute_reply": "2024-06-16T04:48:54.873776Z"
    },
    "papermill": {
     "duration": 0.027643,
     "end_time": "2024-06-16T04:48:54.877192",
     "exception": false,
     "start_time": "2024-06-16T04:48:54.849549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "levels = ['l1_l2', 'l2_l3', 'l3_l4', 'l4_l5', 'l5_s1']\n",
    "\n",
    "# Function to update row_id with levels\n",
    "def update_row_id(row, levels):\n",
    "    level = levels[row.name % len(levels)]\n",
    "    return f\"{row['study_id']}_{row['condition']}_{level}\"\n",
    "\n",
    "# Update row_id in expanded_test_desc to include levels\n",
    "expanded_test_desc['row_id'] = expanded_test_desc.apply(lambda row: update_row_id(row, levels), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9c80c4ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:54.897635Z",
     "iopub.status.busy": "2024-06-16T04:48:54.897007Z",
     "iopub.status.idle": "2024-06-16T04:48:54.931106Z",
     "shell.execute_reply": "2024-06-16T04:48:54.930065Z"
    },
    "papermill": {
     "duration": 0.0467,
     "end_time": "2024-06-16T04:48:54.933321",
     "exception": false,
     "start_time": "2024-06-16T04:48:54.886621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "expanded_test_desc[[\"normal_mild\",\"moderate\",\"severe\"]] = preds\n",
    "\n",
    "final_df = expanded_test_desc[[\"row_id\",\"normal_mild\",\"moderate\",\"severe\"]]\n",
    "\n",
    "target_cols = sample_df.columns.tolist()\n",
    "final_df = final_df.groupby('row_id').sum().reset_index()\n",
    "# normalize the columns\n",
    "final_df[target_cols[1:]] = final_df[target_cols[1:]].div(final_df[target_cols[1:]].sum(axis=1), axis=0)\n",
    "final_df[target_cols].to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "90bc4c49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-16T04:48:54.954859Z",
     "iopub.status.busy": "2024-06-16T04:48:54.954574Z",
     "iopub.status.idle": "2024-06-16T04:48:54.972395Z",
     "shell.execute_reply": "2024-06-16T04:48:54.971567Z"
    },
    "papermill": {
     "duration": 0.032087,
     "end_time": "2024-06-16T04:48:54.974244",
     "exception": false,
     "start_time": "2024-06-16T04:48:54.942157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>normal_mild</th>\n",
       "      <th>moderate</th>\n",
       "      <th>severe</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44036939_left_neural_foraminal_narrowing_l1_l2</td>\n",
       "      <td>0.273454</td>\n",
       "      <td>0.355865</td>\n",
       "      <td>0.370681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44036939_left_neural_foraminal_narrowing_l2_l3</td>\n",
       "      <td>0.308608</td>\n",
       "      <td>0.296111</td>\n",
       "      <td>0.395281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>44036939_left_neural_foraminal_narrowing_l3_l4</td>\n",
       "      <td>0.353130</td>\n",
       "      <td>0.348518</td>\n",
       "      <td>0.298352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>44036939_left_neural_foraminal_narrowing_l4_l5</td>\n",
       "      <td>0.380154</td>\n",
       "      <td>0.335793</td>\n",
       "      <td>0.284053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44036939_left_neural_foraminal_narrowing_l5_s1</td>\n",
       "      <td>0.245693</td>\n",
       "      <td>0.294494</td>\n",
       "      <td>0.459813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>44036939_left_subarticular_stenosis_l1_l2</td>\n",
       "      <td>0.296708</td>\n",
       "      <td>0.353759</td>\n",
       "      <td>0.349533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>44036939_left_subarticular_stenosis_l2_l3</td>\n",
       "      <td>0.301977</td>\n",
       "      <td>0.371696</td>\n",
       "      <td>0.326327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>44036939_left_subarticular_stenosis_l3_l4</td>\n",
       "      <td>0.309596</td>\n",
       "      <td>0.346748</td>\n",
       "      <td>0.343655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>44036939_left_subarticular_stenosis_l4_l5</td>\n",
       "      <td>0.364366</td>\n",
       "      <td>0.330480</td>\n",
       "      <td>0.305154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>44036939_left_subarticular_stenosis_l5_s1</td>\n",
       "      <td>0.401104</td>\n",
       "      <td>0.303510</td>\n",
       "      <td>0.295387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>44036939_right_neural_foraminal_narrowing_l1_l2</td>\n",
       "      <td>0.274685</td>\n",
       "      <td>0.354774</td>\n",
       "      <td>0.370542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>44036939_right_neural_foraminal_narrowing_l2_l3</td>\n",
       "      <td>0.305354</td>\n",
       "      <td>0.297063</td>\n",
       "      <td>0.397583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>44036939_right_neural_foraminal_narrowing_l3_l4</td>\n",
       "      <td>0.354345</td>\n",
       "      <td>0.347949</td>\n",
       "      <td>0.297706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>44036939_right_neural_foraminal_narrowing_l4_l5</td>\n",
       "      <td>0.380182</td>\n",
       "      <td>0.336755</td>\n",
       "      <td>0.283063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>44036939_right_neural_foraminal_narrowing_l5_s1</td>\n",
       "      <td>0.246383</td>\n",
       "      <td>0.294207</td>\n",
       "      <td>0.459411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>44036939_right_subarticular_stenosis_l1_l2</td>\n",
       "      <td>0.362286</td>\n",
       "      <td>0.334248</td>\n",
       "      <td>0.303465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>44036939_right_subarticular_stenosis_l2_l3</td>\n",
       "      <td>0.392626</td>\n",
       "      <td>0.305206</td>\n",
       "      <td>0.302168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>44036939_right_subarticular_stenosis_l3_l4</td>\n",
       "      <td>0.300440</td>\n",
       "      <td>0.351862</td>\n",
       "      <td>0.347699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>44036939_right_subarticular_stenosis_l4_l5</td>\n",
       "      <td>0.308061</td>\n",
       "      <td>0.371141</td>\n",
       "      <td>0.320798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>44036939_right_subarticular_stenosis_l5_s1</td>\n",
       "      <td>0.308094</td>\n",
       "      <td>0.350270</td>\n",
       "      <td>0.341637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>44036939_spinal_canal_stenosis_l1_l2</td>\n",
       "      <td>0.199992</td>\n",
       "      <td>0.253515</td>\n",
       "      <td>0.546492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>44036939_spinal_canal_stenosis_l2_l3</td>\n",
       "      <td>0.319392</td>\n",
       "      <td>0.357005</td>\n",
       "      <td>0.323602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>44036939_spinal_canal_stenosis_l3_l4</td>\n",
       "      <td>0.368074</td>\n",
       "      <td>0.292347</td>\n",
       "      <td>0.339579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>44036939_spinal_canal_stenosis_l4_l5</td>\n",
       "      <td>0.169643</td>\n",
       "      <td>0.278462</td>\n",
       "      <td>0.551895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>44036939_spinal_canal_stenosis_l5_s1</td>\n",
       "      <td>0.236143</td>\n",
       "      <td>0.284884</td>\n",
       "      <td>0.478973</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             row_id  normal_mild  moderate  \\\n",
       "0    44036939_left_neural_foraminal_narrowing_l1_l2     0.273454  0.355865   \n",
       "1    44036939_left_neural_foraminal_narrowing_l2_l3     0.308608  0.296111   \n",
       "2    44036939_left_neural_foraminal_narrowing_l3_l4     0.353130  0.348518   \n",
       "3    44036939_left_neural_foraminal_narrowing_l4_l5     0.380154  0.335793   \n",
       "4    44036939_left_neural_foraminal_narrowing_l5_s1     0.245693  0.294494   \n",
       "5         44036939_left_subarticular_stenosis_l1_l2     0.296708  0.353759   \n",
       "6         44036939_left_subarticular_stenosis_l2_l3     0.301977  0.371696   \n",
       "7         44036939_left_subarticular_stenosis_l3_l4     0.309596  0.346748   \n",
       "8         44036939_left_subarticular_stenosis_l4_l5     0.364366  0.330480   \n",
       "9         44036939_left_subarticular_stenosis_l5_s1     0.401104  0.303510   \n",
       "10  44036939_right_neural_foraminal_narrowing_l1_l2     0.274685  0.354774   \n",
       "11  44036939_right_neural_foraminal_narrowing_l2_l3     0.305354  0.297063   \n",
       "12  44036939_right_neural_foraminal_narrowing_l3_l4     0.354345  0.347949   \n",
       "13  44036939_right_neural_foraminal_narrowing_l4_l5     0.380182  0.336755   \n",
       "14  44036939_right_neural_foraminal_narrowing_l5_s1     0.246383  0.294207   \n",
       "15       44036939_right_subarticular_stenosis_l1_l2     0.362286  0.334248   \n",
       "16       44036939_right_subarticular_stenosis_l2_l3     0.392626  0.305206   \n",
       "17       44036939_right_subarticular_stenosis_l3_l4     0.300440  0.351862   \n",
       "18       44036939_right_subarticular_stenosis_l4_l5     0.308061  0.371141   \n",
       "19       44036939_right_subarticular_stenosis_l5_s1     0.308094  0.350270   \n",
       "20             44036939_spinal_canal_stenosis_l1_l2     0.199992  0.253515   \n",
       "21             44036939_spinal_canal_stenosis_l2_l3     0.319392  0.357005   \n",
       "22             44036939_spinal_canal_stenosis_l3_l4     0.368074  0.292347   \n",
       "23             44036939_spinal_canal_stenosis_l4_l5     0.169643  0.278462   \n",
       "24             44036939_spinal_canal_stenosis_l5_s1     0.236143  0.284884   \n",
       "\n",
       "      severe  \n",
       "0   0.370681  \n",
       "1   0.395281  \n",
       "2   0.298352  \n",
       "3   0.284053  \n",
       "4   0.459813  \n",
       "5   0.349533  \n",
       "6   0.326327  \n",
       "7   0.343655  \n",
       "8   0.305154  \n",
       "9   0.295387  \n",
       "10  0.370542  \n",
       "11  0.397583  \n",
       "12  0.297706  \n",
       "13  0.283063  \n",
       "14  0.459411  \n",
       "15  0.303465  \n",
       "16  0.302168  \n",
       "17  0.347699  \n",
       "18  0.320798  \n",
       "19  0.341637  \n",
       "20  0.546492  \n",
       "21  0.323602  \n",
       "22  0.339579  \n",
       "23  0.551895  \n",
       "24  0.478973  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a7f65eb",
   "metadata": {
    "papermill": {
     "duration": 0.007601,
     "end_time": "2024-06-16T04:48:54.989483",
     "exception": false,
     "start_time": "2024-06-16T04:48:54.981882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 8561470,
     "sourceId": 71549,
     "sourceType": "competition"
    },
    {
     "sourceId": 183388295,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 30716,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 22.351545,
   "end_time": "2024-06-16T04:48:57.716284",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-16T04:48:35.364739",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00b5627e47fa4d43aec1cbb740161652": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3039acae4fa140d08f391fa4703f2a53": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48fde84f8b1a411a9eeea20976fd5f82": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "524d3c08af0f4528a2b0ce5981aa1844": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9d4db9f800444933ac1dd03718a251dd",
       "placeholder": "​",
       "style": "IPY_MODEL_48fde84f8b1a411a9eeea20976fd5f82",
       "value": " 13/13 [00:04&lt;00:00,  6.23it/s]"
      }
     },
     "9d4db9f800444933ac1dd03718a251dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a8af1669483145cc8bb3b11f5b2f5811": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_00b5627e47fa4d43aec1cbb740161652",
       "placeholder": "​",
       "style": "IPY_MODEL_bea04f5dd0954c98816cdcf84a72a9b9",
       "value": "100%"
      }
     },
     "be41fc0f7b0b412cb4651aa56222d97d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a8af1669483145cc8bb3b11f5b2f5811",
        "IPY_MODEL_f8c41b29f4ef4d38b51191e7d377b9bf",
        "IPY_MODEL_524d3c08af0f4528a2b0ce5981aa1844"
       ],
       "layout": "IPY_MODEL_3039acae4fa140d08f391fa4703f2a53"
      }
     },
     "bea04f5dd0954c98816cdcf84a72a9b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d636e646e78b49b4b80089e3401e3884": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dbe6b9f52fee43a18a3158c2420aa5df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f8c41b29f4ef4d38b51191e7d377b9bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_dbe6b9f52fee43a18a3158c2420aa5df",
       "max": 13.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d636e646e78b49b4b80089e3401e3884",
       "value": 13.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
